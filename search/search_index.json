{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Django Daisy Documentation","text":"<p>Welcome to the official documentation for Django Daisy. Use the navigation below to explore various sections of the documentation.</p>"},{"location":"#documentation-sections","title":"Documentation Sections","text":"<ul> <li>Installation Guide</li> <li>Configuration</li> <li>Development Guide</li> </ul> <p>For more information on how to customize and extend Django Daisy, refer to each section.</p>"},{"location":"#additional-resources","title":"Additional Resources","text":"<ul> <li> <p>Live Demo Username: demo Password: demo</p> </li> <li> <p>GitHub Repository</p> </li> <li> <p>Demo Video on YouTube</p> </li> </ul> <p>Happy coding!</p>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#adding-icons-to-your-apps","title":"Adding Icons To Your Apps","text":"<ol> <li>App Configuration in apps.py</li> </ol> <p>You can configure app-specific settings in the apps.py file for each application within your Django project. Below is an example of how to customize the Polls app:</p> <pre><code>class PollsConfig(AppConfig):\n    name = 'polls'  # The name of the app\n    icon = 'fa fa-square-poll-vertical'  # FontAwesome icon for the app (optional)\n    divider_title = \"Apps\"  # Title of the section divider in the sidebar (optional)\n    priority = 0  # Determines the order of the app in the sidebar (higher values appear first, optional)\n    hide = False  # Set to True to hide the app from the sidebar menu (optional)\n</code></pre>"},{"location":"configuration/#explanation","title":"Explanation:","text":"<ul> <li>name: The name of the app.</li> <li>icon: An optional FontAwesome icon to display next to the app name in the sidebar.</li> <li>divider_title: The title for the section divider, grouping similar apps together (optional).</li> <li>priority: An optional setting that controls the order of apps in the sidebar; higher values appear at the top.</li> <li>hide: If set to <code>True</code>, the app will be hidden from the sidebar menu.</li> </ul> <p>Django Daisy uses FontAwesome v5 Free icons for dashboard customization. You can browse and choose from the available free icons on the FontAwesome website.</p> <p>Refer to the FontAwesome site for the complete list of available icons.</p>"},{"location":"configuration/#adding-icons-to-third-party-apps","title":"Adding Icons To Third-party Apps","text":"<p>Django Daisy offers flexible customization options for installed apps, allowing you to modify their appearance, order, and behavior in the sidebar without needing direct access to their code. You can achieve this by using the <code>APPS_REORDER</code> setting in your <code>settings.py</code> file.</p>"},{"location":"configuration/#example","title":"Example:","text":"<pre><code>APPS_REORDER = {\n    # django auth app\n    'auth': {\n        'app': 'users',\n        'icon': 'icon-shield-check',\n        'name': _('Authentication'),\n        'hide': False,\n    },\n\n    # social-auth-app-django app\n    'social_django': {\n        'icon': 'fa-solid fa-users-gear'\n    }\n}\n</code></pre>"},{"location":"configuration/#explanation_1","title":"Explanation:","text":"<ul> <li><code>app</code>: The app to modify.</li> <li><code>icon</code>: Icon name to represent the app in the sidebar.</li> <li><code>name</code>: Custom name for the app.</li> <li><code>hide</code>: Set to <code>True</code> if you want to hide the app from the sidebar.</li> </ul> <p>With this configuration, you can customize apps without altering their code, ensuring flexibility in the admin interface layout.</p>"},{"location":"configuration/#2-global-customizations-in-settingspy","title":"2. Global Customizations in <code>settings.py</code>","text":"<p>You can define various project-wide settings for customizing the Django admin interface in your <code>settings.py</code> file using the <code>DAISY_SETTINGS</code> dictionary. Below is an example configuration:</p> <pre><code>DAISY_SETTINGS = {\n    'SITE_TITLE': 'Django Admin',  # The title of the site \n    'SITE_HEADER': 'Administration',  # Header text displayed in the admin panel\n    'INDEX_TITLE': 'Hi, welcome to your dashboard',  # The title for the index page of dashboard\n    'SITE_LOGO': '/static/admin/img/daisyui-logomark.svg',  # Path to the logo image displayed in the sidebar\n    'EXTRA_STYLES': [],  # List of extra stylesheets to be loaded in base.html (optional)\n    'EXTRA_SCRIPTS': [],  # List of extra script URLs to be loaded in base.html (optional)\n    'LOAD_FULL_STYLES': False,  # If True, loads full DaisyUI components in the admin (useful if you have custom template overrides)\n    'SHOW_CHANGELIST_FILTER': False,  # If True, the filter sidebar will open by default on changelist views\n    'APPS_REORDER': {\n        # Custom configurations for third-party apps that can't be modified directly in their `apps.py`\n        'auth': {\n            'icon': 'fa-solid fa-person-military-pointing',  # FontAwesome icon for the 'auth' app\n            'name': 'Authentication',  # Custom name for the 'auth' app\n            'hide': False,  # Whether to hide the 'auth' app from the sidebar (set to True to hide)\n            'app': 'users',  # The actual app to display in the sidebar (e.g., rename 'auth' to 'users')\n            'divider_title': \"Auth\",  # Divider title for the 'auth' section\n        },\n        'social_django': {\n            'icon': 'fa-solid fa-users-gear',  # Custom FontAwesome icon for the 'social_django' app\n        },\n    },\n}\n</code></pre>"},{"location":"configuration/#explanation_2","title":"Explanation:","text":"<ul> <li>SITE_TITLE: Sets the title of your site (visible in the browser tab).</li> <li>SITE_HEADER: The header displayed at the top of the Django admin interface.</li> <li>INDEX_TITLE: The title shown on the dashboard page of the admin panel.</li> <li>SITE_LOGO: Specifies the path to a logo image that appears in the sidebar.</li> <li>EXTRA_STYLES: A list of additional CSS files to be loaded into the admin interface (useful for custom styling).</li> <li>EXTRA_SCRIPTS: A list of additional JavaScript files to be loaded into the admin interface.</li> <li>LOAD_FULL_STYLES: If set to <code>True</code>, loads the full DaisyUI library for styling, which can be useful if you have overridden the admin templates.</li> <li>SHOW_CHANGELIST_FILTER: Controls whether the changelist filter sidebar is shown by default.</li> <li>APPS_REORDER: This allows you to reorder, customize, and modify third-party apps. For example, you can change the name of the <code>auth</code> app to <code>users</code>, provide a custom icon, or hide it from the sidebar entirely.</li> </ul>"},{"location":"development/","title":"Development Guide","text":""},{"location":"development/#step-1-fork-the-repository","title":"Step 1: Fork the Repository","text":"<p>First, create a fork of the Django Daisy repository on GitHub.</p>"},{"location":"development/#step-2-install-using-git","title":"Step 2: Install Using Git","text":"<p>To install your forked version of Django Daisy, run the following command:</p> <pre><code>pip install -e git+https://github.com/$USERNAME/django-daisy.git#egg=django-daisy\n</code></pre> <p>Make sure to replace <code>$USERNAME</code> with your GitHub username.</p>"},{"location":"development/#step-3-navigate-to-the-source-directory","title":"Step 3: Navigate to the Source Directory","text":"<p>Navigate to the directory where the package is installed:</p> <pre><code>cd $VIRTUAL_ENV/src/django-daisy\n</code></pre>"},{"location":"development/#step-4-install-npm-modules","title":"Step 4: Install NPM Modules","text":"<p>In the project\u2019s root directory, install the required NPM modules:</p> <pre><code>npm i\n</code></pre>"},{"location":"development/#step-5-start-tailwind-watch","title":"Step 5: Start Tailwind Watch","text":"<p>Run the following command to start watching for Tailwind CSS changes:</p> <pre><code>npm run watch\n</code></pre> <p>This will activate Tailwind to watch for changes and automatically update styles.</p>"},{"location":"development/#step-6-customizing-styles","title":"Step 6: Customizing Styles","text":"<p>For custom styles, you can override the default CSS by editing:</p> <pre><code>static/admin/css/styles.css\n</code></pre> <p>You can make your changes here for further UI customizations.</p>"},{"location":"development/#step-7-push-your-changes","title":"Step 7: Push Your Changes","text":"<p>After making your changes, push your updates to your forked repository.</p> <pre><code>git push origin main\n</code></pre>"},{"location":"development/#step-8-create-a-pull-request","title":"Step 8: Create a Pull Request","text":"<p>Once your changes are pushed, create a pull request from your forked repository to the main project. I will review the pull request.</p> <p>Thank you for contributing!</p>"},{"location":"installation/","title":"Installation Guide","text":"<p>This section will guide you through installing Django Daisy into your existing Django project.</p>"},{"location":"installation/#compatibility","title":"Compatibility","text":"<p>Tested on latest django version 5.1.1  Django Daisy is compatible with Django versions 3.4 and above, and has been successfully tested on Django 5.1.1. This ensures compatibility across a wide range of Django versions, including the latest releases.</p>"},{"location":"installation/#step-1-install-django-daisy","title":"Step 1: Install Django Daisy","text":"<p>You can install the Django Daisy package directly via <code>pip</code>:</p> <pre><code>pip install django-daisy\n</code></pre> <p>Or install as an editable GitHub source</p> <pre><code>pip install -e git+https://github.com/hypy13/django-daisy.git#egg=django-daisy\n</code></pre> <p>This will install the latest version of Django Daisy along with its dependencies.</p>"},{"location":"installation/#step-2-update-installed_apps","title":"Step 2: Update <code>INSTALLED_APPS</code>","text":"<p>In your Django project's <code>settings.py</code> file, add <code>daisyui_dashboard</code> to your <code>INSTALLED_APPS</code> list. Be sure to comment out the default Django admin app <code>django.contrib.admin</code> to avoid conflicts:</p> <pre><code>INSTALLED_APPS = [\n    'daisyui_dashboard',\n    # 'django.contrib.admin',  # Disable the default admin\n    ...\n]\n</code></pre> <p>This change will enable the modern DaisyUI dashboard as your primary admin interface, replacing the default Django admin panel.</p>"},{"location":"installation/#step-3-run-your-server","title":"Step 3: Run Your Server","text":"<p>Once the setup is complete, you can start your development server:</p> <pre><code>python manage.py runserver\n</code></pre> <p>Visit <code>http://127.0.0.1:8000</code> to access your new Django Daisy dashboard!</p> <p>Easy-peasy :)</p>"},{"location":"tabs/","title":"Tab and Inline Admin Customization","text":"<p>Django Daisy allows you to easily customize inline admin layouts using DaisyUI tabs. For tabbed inline admins, extend the <code>NavTabMixin</code> from <code>django_daisy.mixins</code> to add tabbed navigation to your inline forms.</p>"},{"location":"tabs/#example-adding-tabs-to-inline-admins","title":"Example: Adding Tabs to Inline Admins","text":"<p>To create a tabbed inline admin interface, use the following structure:</p> <pre><code>from django.contrib import admin\nfrom django_daisy.mixins import NavTabMixin\n\nclass ChoiceInline(admin.TabularInline, NavTabMixin):  # or use admin.StackedInline for a different layout\n    model = Choice\n    extra = 1\n\n@admin.register(Poll)\nclass PollAdmin(admin.ModelAdmin):\n    list_display = [\"text\", \"owner\", \"pub_date\", \"active\", \"created_at\"]\n    search_fields = [\"text\", \"owner__username\"]\n    list_filter = [\"active\", \"created_at\", \"pub_date\"]\n    date_hierarchy = \"pub_date\"\n    inlines = [ChoiceInline]\n</code></pre>"},{"location":"tabs/#explanation","title":"Explanation:","text":"<ul> <li>NavTabMixin: Extends the inline admin to be displayed as tabs.</li> <li>ChoiceInline: Defines the tabbed form for <code>Choice</code> model using <code>TabularInline</code> or <code>StackedInline</code>.</li> <li>PollAdmin: Registers the <code>Poll</code> model with its custom inline form.</li> </ul> <p>With this setup, inline forms are neatly organized into tabs, enhancing the user experience in the admin panel.</p>"}]}