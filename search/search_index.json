{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#adding-icons-to-your-apps","title":"Adding Icons To Your Apps","text":"<p>To assign a custom icon to a specific app, you can add the <code>icon</code> attribute within the app's <code>AppConfig</code> class located in the <code>apps.py</code> file.</p>"},{"location":"configuration/#example","title":"Example:","text":"<pre><code>from django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass CustomerConfig(AppConfig):\n    name = 'apps.customer'\n    verbose_name = _('Customers')\n    icon = 'fa fa-users-viewfinder'  # Add your icon class here\n\n</code></pre> <p>Django Daisy uses FontAwesome v5 Free icons for dashboard customization. You can browse and choose from the available free icons on the FontAwesome website.</p> <p>Refer to the FontAwesome site for the complete list of available icons.</p>"},{"location":"configuration/#adding-icons-to-third-party-apps","title":"Adding Icons To Third-party Apps","text":"<p>Django Daisy offers flexible customization options for installed apps, allowing you to modify their appearance, order, and behavior in the sidebar without needing direct access to their code. You can achieve this by using the <code>APPS_REORDER</code> setting in your <code>settings.py</code> file.</p>"},{"location":"configuration/#example_1","title":"Example:","text":"<pre><code>APPS_REORDER = {\n    # django auth app\n    'auth': {\n        'app': 'users',\n        'icon': 'icon-shield-check',\n        'name': _('Authentication'),\n        'hide': False,\n    },\n\n    # social-auth-app-django app\n    'social_django': {\n        'icon': 'fa-solid fa-users-gear'\n    }\n}\n</code></pre>"},{"location":"configuration/#explanation","title":"Explanation:","text":"<ul> <li><code>app</code>: The app to modify.</li> <li><code>icon</code>: Icon name to represent the app in the sidebar.</li> <li><code>name</code>: Custom name for the app.</li> <li><code>hide</code>: Set to <code>True</code> if you want to hide the app from the sidebar.</li> </ul> <p>With this configuration, you can customize apps without altering their code, ensuring flexibility in the admin interface layout.</p>"},{"location":"development/","title":"Development Guide","text":""},{"location":"development/#step-1-fork-the-repository","title":"Step 1: Fork the Repository","text":"<p>First, create a fork of the Django Daisy repository on GitHub.</p>"},{"location":"development/#step-2-install-using-git","title":"Step 2: Install Using Git","text":"<p>To install your forked version of Django Daisy, run the following command:</p> <pre><code>pip install -e git+https://github.com/$USERNAME/django-daisy.git#egg=django-daisy\n</code></pre> <p>Make sure to replace <code>$USERNAME</code> with your GitHub username.</p>"},{"location":"development/#step-3-navigate-to-the-source-directory","title":"Step 3: Navigate to the Source Directory","text":"<p>Navigate to the directory where the package is installed:</p> <pre><code>cd $VIRTUAL_ENV/src/django-daisy\n</code></pre>"},{"location":"development/#step-4-install-npm-modules","title":"Step 4: Install NPM Modules","text":"<p>In the project\u2019s root directory, install the required NPM modules:</p> <pre><code>npm i\n</code></pre>"},{"location":"development/#step-5-start-tailwind-watch","title":"Step 5: Start Tailwind Watch","text":"<p>Run the following command to start watching for Tailwind CSS changes:</p> <pre><code>npm run watch\n</code></pre> <p>This will activate Tailwind to watch for changes and automatically update styles.</p>"},{"location":"development/#step-6-customizing-styles","title":"Step 6: Customizing Styles","text":"<p>For custom styles, you can override the default CSS by editing:</p> <pre><code>static/admin/css/styles.css\n</code></pre> <p>You can make your changes here for further UI customizations.</p>"},{"location":"development/#step-7-push-your-changes","title":"Step 7: Push Your Changes","text":"<p>After making your changes, push your updates to your forked repository.</p> <pre><code>git push origin main\n</code></pre>"},{"location":"development/#step-8-create-a-pull-request","title":"Step 8: Create a Pull Request","text":"<p>Once your changes are pushed, create a pull request from your forked repository to the main project. I will review the pull request.</p> <p>Thank you for contributing!</p>"},{"location":"installation/","title":"Installation Guide","text":"<p>This section will guide you through installing Django Daisy into your existing Django project.</p>"},{"location":"installation/#compatibility","title":"Compatibility","text":"<p>Tested on latest django version 5.1.1  Django Daisy is compatible with Django versions 3.4 and above, and has been successfully tested on Django 5.1.1. This ensures compatibility across a wide range of Django versions, including the latest releases.</p>"},{"location":"installation/#step-1-install-django-daisy","title":"Step 1: Install Django Daisy","text":"<p>You can install the Django Daisy package directly via <code>pip</code>:</p> <pre><code>pip install django-daisy\n</code></pre> <p>Or install as an editable GitHub source</p> <pre><code>pip install -e git+https://github.com/hypy13/django-daisy.git#egg=django-daisy\n</code></pre> <p>This will install the latest version of Django Daisy along with its dependencies.</p>"},{"location":"installation/#step-2-update-installed_apps","title":"Step 2: Update <code>INSTALLED_APPS</code>","text":"<p>In your Django project's <code>settings.py</code> file, add <code>daisyui_dashboard</code> to your <code>INSTALLED_APPS</code> list. Be sure to comment out the default Django admin app <code>django.contrib.admin</code> to avoid conflicts:</p> <pre><code>INSTALLED_APPS = [\n    'daisyui_dashboard',\n    # 'django.contrib.admin',  # Disable the default admin\n    ...\n]\n</code></pre> <p>This change will enable the modern DaisyUI dashboard as your primary admin interface, replacing the default Django admin panel.</p>"},{"location":"installation/#step-3-run-your-server","title":"Step 3: Run Your Server","text":"<p>Once the setup is complete, you can start your development server:</p> <pre><code>python manage.py runserver\n</code></pre> <p>Visit <code>http://127.0.0.1:8000</code> to access your new Django Daisy dashboard!</p> <p>Easy-peasy :)</p>"},{"location":"tabs/","title":"Tab and Inline Admin Customization","text":"<p>Django Daisy allows you to easily customize inline admin layouts using DaisyUI tabs. For tabbed inline admins, extend the <code>NavTabMixin</code> from <code>django_daisy.mixins</code> to add tabbed navigation to your inline forms.</p>"},{"location":"tabs/#example-adding-tabs-to-inline-admins","title":"Example: Adding Tabs to Inline Admins","text":"<p>To create a tabbed inline admin interface, use the following structure:</p> <pre><code>from django.contrib import admin\nfrom django_daisy.mixins import NavTabMixin\n\nclass ChoiceInline(admin.TabularInline, NavTabMixin):  # or use admin.StackedInline for a different layout\n    model = Choice\n    extra = 1\n\n@admin.register(Poll)\nclass PollAdmin(admin.ModelAdmin):\n    list_display = [\"text\", \"owner\", \"pub_date\", \"active\", \"created_at\"]\n    search_fields = [\"text\", \"owner__username\"]\n    list_filter = [\"active\", \"created_at\", \"pub_date\"]\n    date_hierarchy = \"pub_date\"\n    inlines = [ChoiceInline]\n</code></pre>"},{"location":"tabs/#explanation","title":"Explanation:","text":"<ul> <li>NavTabMixin: Extends the inline admin to be displayed as tabs.</li> <li>ChoiceInline: Defines the tabbed form for <code>Choice</code> model using <code>TabularInline</code> or <code>StackedInline</code>.</li> <li>PollAdmin: Registers the <code>Poll</code> model with its custom inline form.</li> </ul> <p>With this setup, inline forms are neatly organized into tabs, enhancing the user experience in the admin panel.</p>"}]}